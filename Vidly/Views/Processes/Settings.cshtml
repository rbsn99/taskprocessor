
@{
    ViewBag.Title = "Settings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Settings</h2>


<div id="process" class="container">
    <ul class="nav nav-tabs">
        <li class="active">
            <a href="#details" data-toggle="tab">Process details & metadata</a>
        </li>
        <li>
            <a href="#proctasks" data-toggle="tab">Tasks</a>
        </li>
        <li>
            <a href="#flow" data-toggle="tab">Flow diagram</a>
        </li>
    </ul>

    <div class="tab-content ">
        <div class="tab-pane active" id="details">

            <form class="well form-horizontal" method="post" id="process_details_form">
                <fieldset>

                    <!-- Form Name -->
                    <legend>Process details</legend>

                    <!-- Text input-->
                    <div class="form-group">
                        <label class="col-md-4 control-label">Process ID</label>
                        <div class="col-md-4 inputGroupContainer">
                            <input id="process_id" placeholder="Process ID" class="form-control" type="text" readonly>
                        </div>
                    </div>
                    <!-- Text input-->
                    <div class="form-group">
                        <label class="col-md-4 control-label">Process GUID</label>
                        <div class="col-md-4 inputGroupContainer">
                            <input id="process_guid" placeholder="Process GUID" class="form-control" type="text" readonly>
                        </div>
                    </div>
                    <!-- Text input-->
                    <div class="form-group">
                        <label class="col-md-4 control-label">Process Name</label>
                        <div class="col-md-4 inputGroupContainer">
                            <input id="process_name" placeholder="Process Name" class="form-control" type="text">
                        </div>
                    </div>

                    <!-- Text input-->
                    <div class="form-group">
                        <label class="col-md-4 control-label">Created date</label>
                        <div class="col-md-4 inputGroupContainer">
                            <input id="created_date" placeholder="Created date" class="form-control" type="text" readonly="">
                        </div>
                    </div>

                    <!-- Button -->
                    <div class="form-group">
                        <label class="col-md-4 control-label"></label>
                        <div class="col-md-4">
                            <button type="submit" class="btn" onclick="UpdateProcessDetails();">Save</button>
                        </div>
                    </div>

                </fieldset>
            </form>

        </div>
        <!--Flow tab-->
        <div class="tab-pane"  id="proctasks">


            <h3>Process tasks configuration</h3>
            <div id="taskTypes">

                <div class="row">
                    <div class="col-md-3">
                        <select class="form-control" id="typeSelect">
                            <!--generated by JS on load-->
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button class="btn" onclick="AddNewTask();">Add new task</button>
                    </div>
                </div>
                <br />

                <table id="tasks" class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>GUID</th>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Task type</th>
                            <th>Attributes</th>
                            <th>Recipients</th>
                            <th>Dependencies</th>
                            <th>Update</th>

                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        <div class="tab-pane" id="flow">


            <h3>Process flow diagram</h3>
        <div id="taskDiagram">
  
                
        </div>
        </div>


    </div>
</div>


@section scripts
 {
    <script>
        $(document).ready(function () {
            var currenturl = window.location.pathname;
            var id = currenturl.substring(currenturl.lastIndexOf('/') + 1);
 
 
            LoadProcessDetails(id);
            LoadProcessTasksTypes();
            LoadProcessTasks(id);
            GetProcessFlowTree(id);
        }
        );


        function GetProcessFlowTree(id) {
            var treeData = [];

            $(function () {
                $.ajax({
                    type: "GET",
                    url: "/api/processes/tree/" + id,
                    contentType: "application/json",
                    success: function (data) {


                        treeData = data;
                        console.log(Array.isArray(data));
                        RenderTree(treeData);

                    }
                });
            });

            return treeData;
        }
        function LoadProcessTasks(id) {
            var table = $("#tasks").DataTable({
                destroy: true,
                "bFilter": false,
                "bPaginate":false,
                ajax: {
                    url: "processtasks/" + id,
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "ProcessTaskGuid",
                         render: function (data, type, processtask)
                        { return "<input class=\"ProcessTaskGuid\" type=\"text\" disabled=true value=\"" + processtask.ProcessTaskGuid + "\" >" }
                    },
                    {
                        data: "Id",
                        render: function (data, type, processtask)
                            //render: function()
                        { return processtask.Id }

                    },
                    {
                        data: "TaskName",
                        render: function (data, type, processtask)
                        { return "<input class=\"TaskName\" type=\"text\" value=\"" + processtask.TaskName + "\" >" }

                    },
                    {
                        data: "ProcessTaskType.ProcessTaskTypeName",
                        render: function (data, type, processtask)
                        { return processtask.ProcessTaskType.ProcessTaskTypeName }

                    },
                    {
                        data: "attributes",
                        render: function (data, type, processtask) {
                            var fullAttributeValuesList = "";
                            for (i = 0 ; i < processtask.ProcessTaskAttributes.length ; i++) {
                                fullAttributeValuesList += processtask.ProcessTaskAttributes[i].AttributeKey;
                                fullAttributeValuesList += "=";
                                fullAttributeValuesList += processtask.ProcessTaskAttributes[i].AttributeValue;
                                fullAttributeValuesList += ";";

                            }
                            return "<textarea class =\"attributes\">" + fullAttributeValuesList + "</textarea>";
                        }

                    },
                    {
                        render: function (data, type, processtask)
                        { return "<input class=\"recipHolder\" type=\"text\" value=\" " + "recipHolder" + " \" >" }
                    },
                    {
                        render: function (data, type, processtask)
                        { return "<input class=\"depHolder\" type=\"text\" value=\" " + processtask.ProcessTaskDependencies + " \" >" }
                    },
                    {
                        render: function (data, type, processtask) {
                            return "<button type=\"button\" class=\"btn\" onclick=\"UpdateTaskSettings('"
                              + processtask.ProcessTaskGuid + "');\" id=\""
                              + processtask.ProcessTaskGuid + "\"> Update </button>"
                        }
                    }
                ]
            });
        }

        function LoadProcessDetails(id) {

            $.getJSON('/api/processes/settings/' + id,
                function (data) {
                    document.getElementById("process_id").value = data.Id;
                    document.getElementById("process_name").value = data.ProcessName;
                    document.getElementById("process_guid").value = data.ProcessGuid;
                    document.getElementById("created_date").value = data.CreatedDate;
                });
        }

        function LoadProcessTasksTypes() {
            //alert('test');
            $.getJSON('/api/processes/tasktypes',
                    function (data) {
                        for (i = 0; i < data.length; i++) {
                            // $('#taskTypes ul').append('<li><a href="#" data-id="' + data[i].Id + '">' + data[i].ProcessTaskTypeName + '</a></li>');
                            $('#taskTypes select').append('<option value =' + data[i].Id + '>' + data[i].ProcessTaskTypeName + '</option>');
                        }
                    });
        }

        function UpdateProcessDetails() {
            $(function () {
                var id = document.getElementById("process_id").value;
                var process = { ProcessName: document.getElementById("process_name").value };
                $.ajax({
                    type: "PUT",
                    data: JSON.stringify(process),
                    url: "/api/processes/settings/" + id,
                    contentType: "application/json"
                });
            });
        }


        function UpdateTaskSettings(processTaskGuid) {

            var id;

 
            $("#tasks tr").each(function () {
                var _ProcessTaskGuid = $(this).find("input.ProcessTaskGuid").val(),
                _Id = $(this).find("input.Id").val(),
                _TaskName = $(this).find("input.TaskName").val(),
                _ProcessTaskTypeName = $(this).find("input.ProcessTaskTypeName").val(),
                _attributes = $(this).find("textarea.attributes").val(),
                _recipHolder = $(this).find("input.recipHolder").val(),
                _depHolder = $(this).find("input.depHolder").val();

                id = document.getElementById("process_id").value;
                console.log($(this).find("ProcessTaskGuid").val());

                var ptu = {
                    Id: _Id,
                    ProcessTaskGuid: _ProcessTaskGuid,
                    TaskName: _TaskName,
                    ProcessTaskAttributes: _attributes,
                    ProcessTaskRecipient: _recipHolder,
                    ProcessTaskDependencies: _depHolder,
                    ProcessId: id
                };


                if (ptu.ProcessTaskGuid != null)
                    if (processTaskGuid == ptu.ProcessTaskGuid.trim()) {
                        $.ajax({
                            type: "PUT",
                            data: JSON.stringify(ptu),
                            url: "processtasks/" + id,
                            contentType: "application/json"
                        });
                    }
            });

            alert('Task updated!');

            LoadProcessTasks(id);
        }


        function AddNewTask() {
            var selectElement = document.getElementById("typeSelect");
            var taskType = selectElement.options[selectElement.selectedIndex].value;

            processId = document.getElementById("process_id").value;

            var pt = {
                TaskTypeId: taskType,
                ProcessId: processId
            };
            $.ajax({
                type: "POST",
                data: JSON.stringify(pt),
                url: "processtasks/newtask/",
                contentType: "application/json"
            });

            alert('Task added!');
            id = document.getElementById("process_id").value;
            LoadProcessTasks(id);
        }

        function RenderTree(treeData)
        {
            var margin = { top: 20, right: 120, bottom: 20, left: 120 },
 width = 2000 - margin.right - margin.left,
 height = 800 - margin.top - margin.bottom;

            var i = 0;

            var tree = d3.layout.tree()
             .size([height, width]);

            var diagonal = d3.svg.diagonal()
             .projection(function (d) { return [d.y, d.x]; });

            var svg = d3.select("#taskDiagram").append("svg")
             .attr("width", width + margin.right + margin.left)
             .attr("height", height + margin.top + margin.bottom)
              .append("g")
             .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            root = treeData[0];
            console.log(root);

            update(root);

            function update(source) {

                // Compute the new tree layout.
                var nodes = tree.nodes(root).reverse(),
                 links = tree.links(nodes);

                // Normalize for fixed-depth.
                nodes.forEach(function (d) { d.y = d.depth * 350; });

                // Declare the nodes…
                var node = svg.selectAll("g.node")
                 .data(nodes, function (d) { return d.id || (d.id = ++i); });

                // Enter the nodes.
                var nodeEnter = node.enter().append("g")
                 .attr("class", "node")
                 .attr("transform", function (d) {
                     return "translate(" + d.y + "," + d.x + ")";
                 });

                nodeEnter.append("circle")
                 .attr("r", 10)
                 .style("fill", function (d) { return d.newCasepath; });

                nodeEnter.append("text")
                 .attr("x", function (d) {
                     return d.children || d._children ? -13 : 13;
                 })
                 .attr("dy", ".35em")
                 .attr("text-anchor", function (d) {
                     return d.children || d._children ? "end" : "start";
                 })
                 .text(function (d) { return d.name; })
                 .style("fill-opacity", 1);

                // Declare the links…
                var link = svg.selectAll("path.link")
                 .data(links, function (d) { return d.target.id; });

                // Enter the links.
                link.enter().insert("path", "g")
                 .attr("class", "link")
                 .attr("d", diagonal);

            }
        }
    </script>

<script src="http://d3js.org/d3.v3.min.js"></script>
     
}
